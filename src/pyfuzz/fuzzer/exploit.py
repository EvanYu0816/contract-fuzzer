from pyfuzz.fuzzer.interface import Transaction

class Exploit():
    def __init__(self, txList, balance):
        assert(isinstance(txList, list))
        self.txList = txList
        self.balance = balance

    def __repr__(self):
        res = "exploitation:\n"
        for i in range(len(self.txList)):
            if not isinstance(self.txList[i], Transaction):
                continue
            res += "[{}] {}\n".format(str(i), repr(self.txList[i]))
        return res

    def __dict__(self):
        return {
            "tx_list": self.txList,
            "balance_increment": self.balance
        }

    def __hash__(self):
        import hashlib
        m = hashlib.md5()
        payload = self.__repr__() + str(self.balance)
        m.update(payload.encode("utf-8"))
        return int(m.hexdigest(), 16)

    def __eq__(self, other):
        return self.__class__() == self.__class__() and self.__repr__() == self.__repr__()